#--------------------------DOCKER--------------------------

#Questions :
    What is Docker ?
        #It's a cliet-server architecture
        #The daemon is a server and the CLI is one of many clients
        #With the client you manage different components
        #Such as images, containers, networks and data volumes...
        #The key take away : client and daemon doesn't need to be on the same box

    What is docker daemon ?
        #Docker Daemon is a server which interacts with the operating system and performs all kind of services
        #The Docker Daemon listens for REST API request and performs the operations

    Who pull and run the image ? Client or daemon ?
        #The client only tells the daemon that a he wants to pull an image to the remote host
        #This remote host is the same computer where daemon is running
        #Client can connect to various daemons and pull images in each one but the image will be saved on daemon's host

    What is the current version ?
    #version 19.03

    Where can we find the docker daemon ?
    #https://medium.com/better-programming/about-var-run-docker-sock-3bfd276e12fd
    #The daemon listens the unix socket : /var/run/docker.sock (by default)
    #Containers can use it to communicate with the daemon
    
    #Example
    #docker container run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer
    #Portainer can be used as container manager (container monitoring others)



#Example :

    CLIENT                  DOCKER_HOST                  REGISTRY
    docker build            container 1                   image 1
    docker pull             container 2                   image 1
    docker run              container 3                   image 1
    ...                     ...

#All commands (from this file) :  
    docker version
    docker image
    docker rmi
    docker build
    docker rm
    docker search
    docker info
    docker pull
    docker ps
    docker run
    docker attach
    docker stop
    docker kill
    docker events
    docker cp
    docker exec
    docker network
    docker tag

#Next commands
    docker commit
    docker push
    docker login
    docker logs
    docker prune

#Check for version
docker --version

#Display all images
docker images

#Delete an image with ID fd484f19954f
docker rmi fd484f19954f
#If image has multiple tags
#You'll have this
#Output :
    Error: Conflict, cannot delete image fd484f19954f because it is tagged in multiple repositories, use -f to force
    2013/12/11 05:47:16 Error: failed to remove one or more images

#Delete an image with ID fd484f19954f (forcing)
#If image has multiple tags
#Each image wil ve deleted
docker rmi -f fd484f19954f

#Vocabulary :
    #REPOSITORY
    A repository is any group of builds of an image with the same name
    Where you store 1 or more versions of a docker image versioned with tags

    #REGISTRY
    Repositories hosting
    Stores a collection of repositories

#Delete all images
docker rmi $(docker images -a -q)

#Delete all images (force)
docker rmi -f $(docker images -a -q)

#Buid an image from a Dockerfile
#The Dockerfile is in the current directory
#"." means that the current directory will be used as "./" 
#inside the Dockerfile instructions...
docker build .

#Build an image from a Dockerfile with name ninja
#The Dockerfile is in the current directory
docker build -t <IMAGENAME> .
docker build -t ninja .

#Build an image from Dockerfile located in /path/to/a/Dockerfile
docker build -f /path/to/a/Dockerfile .

#Build an image from Dockerfile.debug
docker build -f <DOCKERFILENAME> <context>
docker build -f Dockerfile.debug .

#Example
#The commands will build  the current context (as specified by the .)
#Once using a debug version of a Dockerfile
#Once using a production version of a Dockerfile
docker build -f dockerfiles/Dockerfile.debug -t myapp_debug .
docker build -f dockerfiles/Dockerfile.prod  -t myapp_prod .

#IMPORTANT
docker build ../ #<= WILL FAIL !
#For security reasons the context is limited to the current directory

#Ignore some files from context
#The same as .gitignore file
.dockerignore

#Delete a container
docker rm <CONTAINERID>

#Delete a container (forcing)
#Needed if the container is running
docker rm -f <CONTAINERID>

#Delete all containers
#Get all container IDs (started or stopped) = > docker ps -a -q
docker rm $(docker ps -a -q)

#Delete all containers (force)
docker rm -f $(docker ps -a -q)

#Information about containers
docker info

#Search inside docker hub (official repository online)
docker search redis
docker search elasticsearch

#Retrieve image (from docker hub)
#Pull the image with tag "latest"
#docker pull debian:latest
docker pull debian

#Retrieve image (from my registry)
#Registy : myregistry.local (port 5000)
docker pull myregistry.local:5000/path/to/my/repo/image:tag

#Display container (started only)
docker ps

#Display all containers (started or stopped)
docker ps -a

#Display all containers but prettier (started or stopped)
docker ps -a --format 'table {{.Names}}\t{{.Image}}'

#Display all container ID
docker ps -q

#Logs from container
docker logs -f

#Run a debian image with name "debian_container" in interactive & tty & detached mode
#Interactive mode : enter in the container directly after that
#Detached mode : no output inside the console (we can continue on the same machine)
#the same as a ssh connection or going inside a VM
#Port 9000 on host is connected to port 80 on container
#Explanation :
    #1.If you don't have the image locally, docker pulls it from the registry
    #2.Docker creates a new container
    #3.Docker allocates  a read-write filesystem to the container
    #4.Docker creates a network interface to connect the container to the defaukt network
    #5.Docker starts the container and executes /bin/bash (interactive mode)
    #https://medium.com/devopsion/life-and-death-of-a-container-146dfc62f808
docker run -it -d -p 9000:80 --name=debian_container1 debian /bin/bash
#Output :
root@9254e01fadad

#BE CAREFUL WITH DETACHED MODE !!
#A container started in detached mode exits when the run process exits
#Run a nginx container called "reverse_proxy" and start it
#So don't that :
#The container will stop when the service is up
docker run -d -p 80:80 --name reverse_proxy nginx service nginx start

#BUT

#Prefer this :
docker run -d -p 80:80 --name reverse_proxy nginx nginx -g 'daemon off;'

#Reattach to the nginx
docker attach <nginx_container_name>

#Stop container gracefully (SIGTERM)
docker stop

#Stop all containers gracefully (SIGTERM)
docker stop $(docker ps -aq)

#https://medium.com/@gchudnov/trapping-signals-in-docker-containers-7a57fdda7d86
#https://www.memogeeks.com/2018/11/kill-stop-and-pause-docker-commands.html#summary
#https://superuser.com/questions/756999/whats-the-difference-between-docker-stop-and-docker-kill/1204541#1204541
#Kill one or more containers (abruptly)
docker kill

#Kill containers with a signal
#SIGKILL by default
docker kill --signal=SIGHUP <container>
#OR
docker kill -s

#Kill all containers
#Get all container IDs => docker ps -q
docker kill $(docker ps -q)

docker events

#Information about processes inside container
docker top <container>

#https://blog.gougousis.net/file-permissions-the-painful-side-of-docker/
#Copy a file (or a folder) from host to container
#docker cp <SRC_PATH> <container_name>:<DEST_PATH>
docker cp foo.txt nginx:~foo.txt

#Copy a file (or a folder) from container to host
#Files copied are created with UID:GID of the root user
#docker cp <container_name>:<SRC_PATH> <DEST_PATH>
docker cp nginx:~foo.txt foo.txt

#Execute a command inside the container
#With tty & interactive mode
docker exec -it <container> <shell>

#Connect as root
#To do that we execute the shell
docker exec -it <container> -u root /bin/bash
#or
docker exec -it <container> -u root bash
#or
docker exec -it <container> -u root /bin/sh
#or
docker exec -it <container> -u root sh

#Show disk space used by docker daemon
docker system df
#Output
#Network information is not shown because it doesnâ€™t consume the disk space.
TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE
Images              10                  4                   4.837GB             3.27GB (67%)
Containers          5                   4                   9.413GB             223.1MB (2%)
Local Volumes       15                  3                   5.801GB             654.4MB (11%)
Build Cache         0                   0                   0B                  0B

#Print information in a custom file
docker system df --verbose > docker.stats-YYYY-MM-DD.log

#Show docker disk usage (verbose)
docker system df -v

#Remove unused containers (stopped), networks, cache
#Volumes are not removed
docker system prune

#Remove unused containers (stopped), networks, cache (with volumes)
docker system prune -a --volumes

#Show information about docker system
docker system info

#Displays networks between containers
docker network ls

#Tag a docker image
docker tag <image> <registry/tag>
docker tag ubuntu:16.04 localhost:5000/my-ubuntu

#Commit a container with id c3f279d17e0a
#Won't keep the mounted volumes
#https://tuhrig.de/difference-between-save-and-export-in-docker/
docker commit c3f279d17e0a repo/myimage:version2
#Output
f5283438590d
#Explanation :
    docker images
    #Output
    REPOSITORY                        TAG                 ID                  CREATED             SIZE
    repo/myimage                      version3            f5283438590d        15 seconds ago      100 MB

#Push an image or a repository to a registry
#Registry : localhost:5000
docker push localhost:5000/repo/myimage:version2
#URL to find your repositories :
http://localhost:5000/v2/_catalog

#Container processes vs hosts processes
    https://stackoverflow.com/questions/39931316/what-is-the-pid-in-the-host-of-a-process-running-inside-a-docker-container
    https://www.youtube.com/watch?v=W6p_aiYplbM
#Example
    #We have 3 blocked processes (apache for example)
    #Find a processus sleeping from container to host
    #Inside container :
        ps -aef
    #Output
        PID   USER     TIME   COMMAND
         1    root     0:00     sh
         7    root     0:00     sleep 900 #1
         8    root     0:00     sleep 900 #2
         9    root     0:00     sleep 900 #3
        10    root     0:00     ps -fe
    #You found the PID of your sleeping processus on container
    #Now find them on host to shut them down
    ps -fe | grep sleep
    #Output
    root     10394 10366  0 09:11 pts/10   00:00:00 sleep 900
    root     10397 10366  0 09:12 pts/10   00:00:00 sleep 900
    root     10398 10366  0 09:12 pts/10   00:00:00 sleep 900
    #The processes 10394, 10397, 10398 are running on the host
    #Find the mapping with Namespace PID
    #Be careful of Linux version maybe it won't work
    #Maybe Namespace PID is only available since Linux 4.1 !
    grep -i pid /proc/10394/status
    #Output
    Pid:    10394
    PPid:   10366
    TracerPid:  0
    NSpid:  10394   7
    #The processus 10394 has the id 7 in the container
    #Kill the processus inside the container
    kill 7
    #The processus will disappear from the container

#Example
#Start a container with a process sleep
docker run -d --name usertest ubuntu:latest sleep infinity
ps aux | grep sleep
#Output
root      322297  0.1  0.0   4532   796 ?        Ss   08:52   0:00 sleep infinity
#sart it again
docker run -d --name usertest ubuntu:latest sleep infinity
#Output
dockrem+  324136  0.0  0.0   4532   840 ?        Ss   09:29   0:00 sleep infinity

#Display processus from container
(ps -ef | grep $(docker inspect --format '{{.State.Pid}}' php-sandbox) | awk '{print $2}') ; do grep NSpid: /proc/$i/status ; done
#OR
for i in $(ps -ef | grep `docker inspect --format '{{.State.Pid}}' containerID` | awk '{print $2}') ; do grep NSpid: /proc/$i/status ;



#--------------------------SECURITY--------------------------
https://github.com/docker/docker-bench-security

#Create a user john.wick (container)
#With home and shell /bin/bash
#In the Dockerfile
RUN useradd -d /home/john.wick -m -s /bin/bash john.wick
USER john.wick

#PERMISSION MANAGEMENT
https://blog.ippon.tech/docker-and-permission-management/

#--------------------------STORAGE--------------------------
https://dev.pierre-galvez.fr/modifier-lemplacement-des-donnees-de-docker/
https://docs.docker.com/storage/storagedriver/

#Docker daemon directory
#(Linux)
/var/lib/docker
#Windows
C:\ProgramData\docker

#--------------------------SERVICE--------------------------
#https://success.docker.com/article/using-systemd-to-control-the-docker-daemon

#Enable the daemon to start at boot time 
systemctl enable docker

#Disable the daemon to start at boot time 
systemctl disable docker

#Viewing logs about the docker service
journalctl -u docker


#How to install vim inside from a container ?

apt-get update && \
apt-get install apt-file && \
apt-file update && \
apt-get install vim     # now finally this will work !!!

#--------------------------PRACTICE--------------------------
https://docker.cdn.prismic.io/docker%2Fa2d454ff-b2eb-4e9f-af0e-533759119eee_dca+study+guide+v1.0.1.pdf

https://softchris.github.io/pages/docker-concepts.html#the-basics