#--------------------------DOCKER--------------------------

#Current version
version 19.03

#All commands (from this file) :  
    docker version
    docker image
    docker rmi
    docker build
    docker rm
    docker search
    docker info
    docker pull
    docker ps
    docker run
    docker attach
    docker stop
    docker kill
    docker events
    docker cp
    docker exec
    docker network
    docker tag

#Next commands
    docker tag
    docker commit
    docker pull
    docker push
    docker login
    docker logs
    docker prune

#Check for version
docker --version

#Display all images
docker images

#Delete an image with ID fd484f19954f
docker rmi fd484f19954f
#If image has multiple tags
#You'll have this
#Output :
    Error: Conflict, cannot delete image fd484f19954f because it is tagged in multiple repositories, use -f to force
    2013/12/11 05:47:16 Error: failed to remove one or more images

#Delete an image with ID fd484f19954f (forcing)
#If image has multiple tags
#Each image wil ve deleted
docker rmi -f fd484f19954f

#Vocabulary :
    #REPOSITORY
    A repository is any group of builds of an image with the same name
    Where you store 1 or more versions of a docker image versioned with tags

    #REGISTRY
    Repositories hosting
    Stores a collection of repositories

#Buid an image from a Dockerfile
#The Dockerfile is in the current directory
#"." means that the current directory will be uses as "./" 
#inside the Dockerfile instructions...
docker build .

#Build an image from a Dockerfile with name ninja
#The Dockerfile is in the current directory
docker build -t <IMAGENAME> .
docker build -t ninja .

#Build an image from Dockerfile located in /path/to/a/Dockerfile
docker build -f /path/to/a/Dockerfile .

#Build an image from Dockerfile.debug
docker build -f <DOCKERFILENAME> <context>
docker build -f Dockerfile.debug .

#Example
#The commands will build  the current context (as specified by the .)
#Once using a debug version of a Dockerfile
#Once using a production version of a Dockerfile
docker build -f dockerfiles/Dockerfile.debug -t myapp_debug .
docker build -f dockerfiles/Dockerfile.prod  -t myapp_prod .

#IMPORTANT
docker build ../ #<= WILL FAIL !
#For security reasons the context is limited to the current directory

#Ignore some files from context
#The same as .gitignore file
.dockerignore

#Delete a container
docker rm

#Delete all containers
#Get all container IDs (started or stopped) = > docker ps -a -q
docker rm $(docker ps -a -q)

#Information about containers
docker info

#Search inside docker hub (official repository online)
docker search redis
docker search elasticsearch

#Retrieve image from docker hub
docker pull debian

#Display container (started only)
docker ps

#Display all containers (started or stopped)
docker ps -a

#Display all containers but prettier (started or stopped)
docker ps -a --format 'table {{.Names}}\t{{.Image}}'

#Display all container ID
docker ps -q

#Run a debian image with name "debian_container" in interactive & detached mode
#Interactive mode : enter in the container directly after that
#Detached mode : no output inside the console (we can continue on the same machine)
#the same as a ssh connection or going inside a VM
#Port 9000 on host is connected to port 80 on container
docker run -it -d -p 9000:80 --name=debian_container1 debian
#Output :
root@9254e01fadad


#BE CAREFUL WITH DETACHED MODE !!
#A container started in detached mode exits when the run process exits
#Run a nginx container called "reverse_proxy" and start it
#So don't that :
#The container will stop when the service is up
docker run -d -p 80:80 --name reverse_proxy nginx service nginx start

#BUT

#Prefer this :
docker run -d -p 80:80 --name reverse_proxy nginx nginx -g 'daemon off;'

#Reattach to the nginx
docker attach <nginx_container_name>

#Stop container gracefully (SIGTERM)
docker stop

#https://medium.com/@gchudnov/trapping-signals-in-docker-containers-7a57fdda7d86
#https://www.memogeeks.com/2018/11/kill-stop-and-pause-docker-commands.html#summary
#https://superuser.com/questions/756999/whats-the-difference-between-docker-stop-and-docker-kill/1204541#1204541
#Kill one or more containers (abruptly)
docker kill

#Kill containers with a signal
#SIGKILL by default
docker kill --signal=SIGHUP <container>
#OR
docker kill -s

#Kill all containers
#Get all container IDs => docker ps -q
docker kill $(docker ps -q)

docker events

#Information about processes inside container
docker top <container>

#https://blog.gougousis.net/file-permissions-the-painful-side-of-docker/
#Copy a file (or a folder) from host to container
#docker cp <SRC_PATH> <container_name>:<DEST_PATH>
docker cp foo.txt nginx:~foo.txt

#Copy a file (or a folder) from container to host
#Files copied are created with UID:GID of the root user
#docker cp <container_name>:<SRC_PATH> <DEST_PATH>
docker cp nginx:~foo.txt foo.txt

#Connect as root
docker exec -it <container> -u root /bin/bash
#or
docker exec -it <container> -u root bash
#or
docker exec -it <container> -u root /bin/sh
#or
docker exec -it <container> -u root sh

#Displays networks between containers
docker netwkork ls

#Tag a docker image
docker tag <image> <registry/tag>
docker tag ubuntu:16.04 localhost:5000/my-ubuntu

#Container processes vs hosts processes
    https://stackoverflow.com/questions/39931316/what-is-the-pid-in-the-host-of-a-process-running-inside-a-docker-container
#Example
    #We have 3 blocked processes (apache for example)
    #Find a processus sleeping from container to host
    #Inside container :
        ps -aef
    #Output
        PID   USER     TIME   COMMAND
         1    root     0:00     sh
         7    root     0:00     sleep 900 #1
         8    root     0:00     sleep 900 #2
         9    root     0:00     sleep 900 #3
        10    root     0:00     ps -fe
    #You found the PID of your sleeping processus on container
    #Now find them on host to shut them down
    ps -fe | grep sleep
    #Output
    root     10394 10366  0 09:11 pts/10   00:00:00 sleep 900
    root     10397 10366  0 09:12 pts/10   00:00:00 sleep 900
    root     10398 10366  0 09:12 pts/10   00:00:00 sleep 900
    #The processes 10394, 10397, 10398 are running on the host
    #Find the mapping with Namespace PID
    #Be careful of Linux version maybe it won't work
    #Maybe Namespace PID is only available since Linux 4.1 !
    grep -i pid /proc/10394/status
    #Output
    Pid:    10394
    PPid:   10366
    TracerPid:  0
    NSpid:  10394   7
    #The processus 10394 has the id 7 in the container
    #Kill the processus inside the container
    kill 7
    #The processus will disappear from the container

#Display processus from container
(ps -ef | grep $(docker inspect --format '{{.State.Pid}}' php-sandbox) | awk '{print $2}') ; do grep NSpid: /proc/$i/status ; done
#OR
for i in $(ps -ef | grep `docker inspect --format '{{.State.Pid}}' containerID` | awk '{print $2}') ; do grep NSpid: /proc/$i/status ;