#--------------------------BEST PRACTICES--------------------------
#https://www.youtube.com/watch?v=QfmVc9c_8Po

#Scala
#File tree
- .idea (IntelliJ files)
- project (plugins and additional settings for sbt)
- src (source files)
    - main (application code)
        - java (Java source files)
        - scala (Scala source files) <-- This is all we need for now
        - scala-2.12 (Scala 2.12 specific files)
    - test (unit tests)
- target (generated files)
- build.sbt (build definition file for sbt)


#Run tests
sbt test

#Keywords
#Loan pattern
https://www.outbrain.com/techblog/2017/05/effective-testing-with-loan-pattern-in-scala/

#Monades
M[A]
List[A]
Option[A]
Future[A]
Either[A]

#MAP
#map take a function (that take A and returns B) as parameter and return
def map[B](f: A => B): M[B]


#Either
#We can map inside an Either to change the right values => either.map(...)
#We can map inside an Either to change the left values => either.left.map(...)

#How to handle dates ?
#Avoid LocalDate because it's not precise enough
Instant.now
Instant.now().toEpochMilli
OffsetDateTime.now()
ZonedDateTime.now()
java.util.Date.from(Instant.now())
LocalDate.now()

res0: java.time.Instant = 2020-01-28T16:56:27.809Z
res1: Long = 1580230587881
res2: java.time.OffsetDateTime = 2020-01-28T17:56:27.953+01:00
res3: java.time.ZonedDateTime = 2020-01-28T17:56:28.048+01:00[Europe/Paris]
res4: java.util.Date = Tue Jan 28 17:56:28 CET 2020
res5: java.time.LocalDate = 2020-01-28


#Value class for wrapping primitive types (Int, Boolean, Long...)
#https://stackoverflow.com/questions/42234299/are-there-advantages-for-using-value-class-without-methods-vs-type-alias
#This will fail at compile time because "some random string" is not a PersonId
case class PersonId(id: String) extends AnyVal
case class Person(id: PersonId)

Person("some random string")

#Dry overuse

case class User(id: Option[String], name: String, email: Option[String] = None, friends: Seq[String]) = Seq(), admin: Boolean = false)
#VS
case class UserCreation(name: String, email: String)
case class User(id: String, name: String, email: String)
case class UserFull(id: String, name: String, email: String, friends: Seq[String], admin: Boolean)
