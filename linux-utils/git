#--------------------------GIT --------------------------

#https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/

#Display current remote url
git remote -v
#Output
origin  git@old-remote-url:ninja/my-project.git (fetch)
origin  git@old-remote-url:ninja/my-project.git (push)

#Change remote url
git remote set-url git@remote-url:ninja/my-project.git

#Initialize a repository called "docker-utils"
git init
git add foo.txt
git commit -m "wip: first commit"
git remote add origin git@github.com:mama165/docker-utils.git
git push --set-upstream origin master

#Get all changes from remote (working directory unchanged)
git fetch origin master

#Get all changes from remote (with merge commit)
#Issuing a git fetch + git merge
git pull

#Get all changed from remote (without merge commit)
git pull --rebase

#Create a new a branch feature (from our current commit)
#We directly arrive inside the new branch
git checkout -b feature
#Example
git checkout -b poc-gitlab

#Switch from branch feature to master
git checkout master

#Display all branches (local)
git branch -l
#OR
git branch --list

#Display all branches (remote)
git branch -r

#Display all branches (remote & local)
git branch -a

#Count remote branches
git branch --remotes | wc -l

#Rename local an remote branch
#If you are on the branch
git branch -m new-name
#If you're not
git branch -m old-name new-name
#Delete the feature branch
git push --delete origin feature

#Push the new-name local branch.
git push origin :old-name new-name

#Delete branch on local (with warning)
#You have to be on another branch for that
git branch -d <branch_name>
#Reset the upstream branch for the new-name local branch
git push origin -u new-name

#Delete branch on local (without warning)
#You have to be on another branch for that
git branch -D <branch_name>

#Add all files inside current folder
git add .

#Undo git add
git reset

#Undo last commit
#If you have NOT pushed your changes to remote
#Delete all different commits from local to HEAD
#You'll find the changes as uncommitted local modifications in your working copy.
$ git reset --soft HEAD~1
#If you have pushed your changes to remote
git revert HEAD

#Your are working on a local branch feature
#You want to put all your changes from master
#You need to update your local branch feature
#https://www.atlassian.com/fr/git/tutorials/merging-vs-rebasing

    #MERGE
    git checkout master
    git merge master
    #OR
    git merge feature master
    #A merge commit will be added

    #REBASE
    git checkout feature
    git rebase master
    #No merge commit
    #Commit history cleaner
    #Abort the rebase
    git rebase --abort
    #Continue the rebase
    git rebase --continue
    #Be careful when pushing all changes
    git push --force

    #REBASE INTERACTIVE
    git checkout feature
    git rebase -i master
    #We can rewrite each commit before
    #adding the feature on master branch
    #Be careful when pushing all changes
    git push --force-with-lease

#Display commit history (from local)
git log
#OR
git log master

#Display commit history (from remote)
git log origin/master

#Display the name of the changed files
git log --name-only

#Display more changed info
git whatchanged

#Commit changes into an old commit
#Fixup a commit with message
#https://blog.sebastian-daschner.com/entries/git-commit-fixup-autosquash
#Example
3320dec (HEAD) commit 4
03c9685 commit 3
041c401 commit 2
981fffd commit 1
22f759b (tag: base) initial commit
#Fix commit
git commit -a --fixup 981fffd
#Output
c24491b (HEAD) fixup! commit 1
3320dec commit 4
03c9685 commit 3
041c401 commit 2
981fffd commit 1
22f759b (tag: base) initial commit
#Interactively rebase
git rebase -i --autosquash HEAD~5
#Output
#Commit hashes after 22f759b now have been changed
#Based on different commits
caeb1d8 (HEAD) commit 4
2f6d4da commit 3
8207cf2 commit 2
551ef47 commit 1
22f759b (tag: base) initial commit

#Split one commit into two commits
git rebase -i HEAD~1
#Mark the commit with "edit"
git reset HEAD^
git add sample.txt
git commit -m "first message"
git add sample.other.txt
git commit -m "second message"
git rebase --continue

#Push keeping initial history
#When you only push force, you'll erase all record of Alice's changes
git push origin CT-6846 --force-with-lease

#Add and commit with message
git commit -am "wip: new commit message"

#Add modifications to last commit
#Message unchanged
git commit --amend-no-edit

#Change message from last commit
git commit --amend -o -m "New commit message"

#Change message from previous commit
#Find the 9th commit
#Change pick to r (reword) and save/close
git rebase -i @~9   # Show the last 9 commits in a text editor

#Change date of commit
git rebase -i HEAD~n
#Edit commit 
git commit --amend --reset-author --no-edit

#Delete changes (unstaged)
git reset --hard

#Delete changes
#Synchronize with remote feature branch
git reset --hard origin/feature

#Delete last commit (local)
#Your copy are back but unstaged !
git reset --soft HEAD~1

#Delete 2 last commit (local)
#Your copy are back but unstaged !
git reset --soft HEAD~2

#Delete last commit (pushed)
git reset --hard "aba7180fbb57528321644009c45218125ce79103"
git clean -f -d
git push origin feature --force-with-lease

#Get changes from a commit in another remote branch feature1 to feature2
#Only need the hash from feature1
git cherry-pick e87305647c7d1e3ebf0d3fa1e1fa73e9eef0f090

#Get changes from origin/master to feature (local)
git fetch
git rebase origin/master

#Code review
#We need the remote feature branch of a developer
git fetch
git checkout review

#Good practice
Go on Gitlbab and rebase but wait the "semaphore"
to merge

#Alias zsh
gst
glog
gl
gstp (git stash pop)