#--------------------------GIT --------------------------

#Initialize a repository called "docker-utils"
git init
git add foo.txt
git commit -m "wip: first commit"
git remote add origin git@github.com:mama165/docker-utils.git
git push --set-upstream origin master

#Get all changes from remote (working directory unchanged)
git fetch origin master

#Get all changes from remote (with merge commit)
#Issuing a git fetch + git merge
git pull

#Get all changed from remote (without merge commit)
git pull --rebase

#Create a new a branch feature (from our current commit)
#We directly arrive inside the new branch
git checkout -b feature
#Example
git checkout -b poc-gitlab

#Switch from branch feature to master
git checkout master

#Display all branches (local)
git branch -l
#OR
git branch --list

#Display all branches (remote)
git branch -r

#Display all branches (remote & local)
git branch -a

#Delete branch on local (with warning)
#You have to be on another branch for that
git branch -d <branch_name>

#Delete branch on local (without warning)
#You have to be on another branch for that
git branch -D <branch_name>

#Add all files inside current folder
git add .

#Undo git add
git reset

#Undo last commit
#If you have NOT pushed your changes to remote
#Delete all different commits from local to HEAD
git reset HEAD~1
#If you have pushed your changes to remote
git revert HEAD

#Your are working on a local branch feature
#You want to put all your changes from master
#You need to update your local branch feature
#https://www.atlassian.com/fr/git/tutorials/merging-vs-rebasing

    #MERGE
    git checkout master
    git merge master
    #OR
    git merge feature master
    #A merge commit will be added

    #REBASE
    git checkout feature
    git rebase master
    #No merge commit
    #Commit history cleaner
    #Abort the rebase
    git rebase --abort
    #Continue the rebase
    git rebase --continue
    #Be careful when pushing all changes
    git push -- force

    #REBASE INTERACTIVE
    git checkout feature
    git rebase -i master
    #We can rewrite each commit before
    #adding the feature on master branch
    #Be careful when pushing all changes
    git push --force

#Display commit history (from local)
git log
#OR
git log master

#Display commit history (from remote)
git log origin/master