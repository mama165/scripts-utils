#--------------------------DOCKER--------------------------

#Check for version
docker --version

#Information about containers
docker info

#Search inside docker hub (official repository online)
docker search redis
docker search elasticsearch

#Retrieve image from docker hub
docker pull debian

#Run a debian image with name "debian_container" in interactive & detached mode
#Interactive mode : enter in the container directly after that
#Detached mode : no output inside the console (we can continue on the same machine)
#the same as a ssh connection or going inside a VM
#Port 9000 on host is connected to port 80 on container
docker run -it -d -p 9000:80 --name=debian_container1 debian
#Output :
root@9254e01fadad


#BE CAREFUL WITH DETACHED MODE !!
#A container started in detached mode exits when the run process exits
#Run a nginx container called "reverse_proxy" and start it
#So don't that :
#The container will stop when the service is up
docker run -d -p 80:80 --name reverse_proxy nginx service nginx start

#BUT

#Prefer this :
docker run -d -p 80:80 --name reverse_proxy nginx nginx -g 'daemon off;'

#Reattach to the nginx
docker attach <nginx_container_name>

#Stop container gracefully (SIGTERM)
docker stop

#https://medium.com/@gchudnov/trapping-signals-in-docker-containers-7a57fdda7d86
#https://www.memogeeks.com/2018/11/kill-stop-and-pause-docker-commands.html#summary
#https://superuser.com/questions/756999/whats-the-difference-between-docker-stop-and-docker-kill/1204541#1204541
#Stop container (abruptly)
docker kill

docker events

#Information about processes inside container
docker top <container>

#Connect as root
docker exec -it <container> -u root /bin/bash
#or
docker exec -it <container> -u root bash
#or
docker exec -it <container> -u root /bin/sh
#or
docker exec -it <container> -u root sh

#Displays networks between containers
docker netwkork ls

#--------------------------DOCKER COMPOSE--------------------------

#Check for version
docker-compose -v
docker-compose --version

#Run docker services(from docker-compose.yml)
docker-compose up
#Detached mode (you won't see any logs)
docker-compose up -d


#Check if config file is correct (from docker-compose.yml)
docker-compose config

#Container processes vs hosts processes
    https://stackoverflow.com/questions/39931316/what-is-the-pid-in-the-host-of-a-process-running-inside-a-docker-container
#Example
    #We have 3 blocked processes (apache for example)
    #Find a processus sleeping from container to host
    #Inside container :
        ps -aef
    #Output
        PID   USER     TIME   COMMAND
         1    root     0:00     sh
         7    root     0:00     sleep 900 #1
         8    root     0:00     sleep 900 #2
         9    root     0:00     sleep 900 #3
        10    root     0:00     ps -fe
    #You found the PID of your sleeping processus on container
    #Now find them on host to shut them down
    ps -fe | grep sleep
    #Output
    root     10394 10366  0 09:11 pts/10   00:00:00 sleep 900
    root     10397 10366  0 09:12 pts/10   00:00:00 sleep 900
    root     10398 10366  0 09:12 pts/10   00:00:00 sleep 900
    #The processes 10394, 10397, 10398 are running on the host
    #Find the mapping with Namespace PID
    #Be careful of Linux version maybe it won't work
    #Maybe Namespace PID is only available since Linux 4.1 !
    grep -i pid /proc/10394/status
    #Output
    Pid:    10394
    PPid:   10366
    TracerPid:  0
    NSpid:  10394   7
    #The processus 10394 has the id 7 in the container
    #Kill the processus inside the container
    kill 7
    #The processus will disappear from the container

#Display processus from container
(ps -ef | grep $(docker inspect --format '{{.State.Pid}}' php-sandbox) | awk '{print $2}') ; do grep NSpid: /proc/$i/status ; done
#OR
for i in $(ps -ef | grep `docker inspect --format '{{.State.Pid}}' containerID` | awk '{print $2}') ; do grep NSpid: /proc/$i/status ;